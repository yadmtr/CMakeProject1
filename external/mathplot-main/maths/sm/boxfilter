// -*- C++ -*-
/*
 * This file is part of sebsjames/maths, a library of maths code for modern C++
 *
 * See https://github.com/sebsjames/maths
 *
 * Boxfilter algorithm implementations
 *
 * Author: Seb James
 */

#pragma once

#include <stdexcept>
#include <array>
#include <sm/vvec>
#include <sm/vec>

namespace sm::algo
{
    /*!
     * Boxfilter implementation 1
     *
     * Apply a 2d, horizontally wrapping box filter. Test to see if boxside is odd and disallow
     * even (which was not not tested). Assume the data in the vvec relates to a rectangle of width w.
     *
     * \param data The input data. Should be a multiple of \tparam w in size. Must be
     * pre-allocated and of the same size as result.
     * \param result The output container. Must not be the same memory as input data.
     *
     * \tparam T The type of the input data
     * \tparam boxside The length of the boxfilter square
     * \tparam w The width of the input data (and of the result)
     * \tparam onlysum If true, only sum up the contributions from the box. If false (the
     * default), sum contributions and divide by box area.
     * \tparam T_o The type of the output data
     */
    template<typename T, int boxside, int w, bool onlysum = false, typename T_o = T>
    static void boxfilter_2d (const sm::vvec<T>& data, sm::vvec<T_o>& result)
    {
        if constexpr (boxside % 2 == 0) {
            throw std::runtime_error ("boxfilter_2d was not designed for even box filter squares (set boxside template param. to an odd value)");
        }
        if (result.size() != data.size()) {
            throw std::runtime_error ("The input data vector is not the same size as the result vector.");
        }

        // Divide by boxarea without accounting for edges (wrapping will sort horz edges)
        static constexpr T_o oneover_boxa = T_o{1} / (static_cast<T_o>(boxside) * static_cast<T_o>(boxside));
        static constexpr int halfbox = boxside / 2;
        static constexpr int halfbox_p1 = halfbox + 1;

        sm::vec<T_o, w> colsum;
        colsum.zero();
        T_o rowsum = T{0};

        int h = data.size() / w;

        // process data row by row
        for (int y = -halfbox; y < h; ++y) {

            // 1. Accumulate column sums; pull out last row.
            if (y + halfbox < h) {
                if (y >= halfbox_p1) {
                    for (int x = 0; x < w; ++x) {
                        // Add to the next row from the data array and subtract the last (bottom) row of the colsum
                        colsum[x] += data[(y + halfbox) * w + x]  -  data[(y - halfbox_p1) * w + x];
                        // T_o       T                         T
                    }
                } else {
                    for (int x = 0; x < w; ++x) {
                        // Just add to the next row from the data array
                        colsum[x] += data[(y + halfbox) * w + x];
                    }
                }
            } else {
                if (y >= halfbox_p1) {
                    // Just subtract
                    for (int x = 0; x < w; ++x) {
                        colsum[x] -= data[(y - halfbox_p1) * w + x];
                    }
                } // else no op on colsum[x]
            }

            rowsum = T{0};
            if (y >= 0) {
                // 2. Initialise rowsum. This happens after we have accumulated colsums. Init rowsum as the sum of the end col
                for (int i = -halfbox_p1; i < 0; ++i) { rowsum += colsum[i + w]; }
                for (int i = 0; i < halfbox; ++i) { rowsum += colsum[i]; }

                // 3. Compute the sum along the row, and write this into result
                int l = -halfbox_p1;
                int r = halfbox;
                for (int x = 0; x < w; ++x) {
                    // A modulus where -x modulus w gives always a positive index: (w + (a % w)) % w
                    rowsum += colsum[(w + (r++ % w)) % w] - colsum[(w + (l++ % w)) % w];

                    if constexpr (onlysum == true) {
                        result[y * w + x] = rowsum;
                    } else {
                        result[y * w + x] = rowsum * oneover_boxa;
                    }
                }
            }
        }
    }

    /*!
     * Boxfilter implementation 2
     *
     * A 'fixed-size containers boxfilter'. Implemented to see if it is any faster than one in
     * which input/output data are sm::vvec. Turns out that it runs at the same speed.
     *
     * Apply a 2d, horizontally wrapping box filter. Test to see if boxside is odd and disallow
     * even (which was not not tested). Assume the data in the vvec relates to a rectangle of width w.
     *
     * \param data The input data. Should be a multiple of \tparam w in size.
     * \param result The output container. Must not be the same memory as input data.
     *
     * \tparam T The type of the input data
     * \tparam T_o The type of the output data
     * \tparam boxside The length of the boxfilter square
     * \tparam w The width of the input data rectangle (and of the result)
     * \tparam h The height of the input data (and of the result)
     * \tparam onlysum If true, only sum up the contributions from the box. If false, sum
     * contributions and divide by box area.
     */
    template<typename T, int boxside, int w, int h, bool onlysum = false, typename T_o = T>
    static void boxfilter_2d (const std::array<T, w * h>& data, std::array<T_o, w * h>& result)
    {
        static_assert ((boxside > 0 && (boxside % 2) > 0),
                       "boxfilter_2d was not designed for even box filter squares (set boxside template param. to an odd value)");

        // Divide by boxarea without accounting for edges (wrapping will sort horz edges)
        static constexpr T_o oneover_boxa = T_o{1} / (static_cast<T_o>(boxside) * static_cast<T_o>(boxside));
        static constexpr int halfbox = boxside / 2;
        static constexpr int halfbox_p1 = halfbox + 1;

        std::array<T_o, w> colsum;
        for (auto& el : colsum) { el = T_o{0}; }
        T_o rowsum = T_o{0};

        // process data row by row
        for (int y = -halfbox; y < h; ++y) {

            // 1. Accumulate column sums; pull out last row.
            if (y+halfbox < h) {
                if (y >= halfbox_p1) {
                    for (int x = 0; x < w; ++x) {
                        // Add to the next row from the data array and subtract the last (bottom) row of the colsum
                        colsum[x] += data[(y + halfbox) * w + x]  -  data[(y - halfbox_p1) * w + x];
                        // T_o       T                         T
                    }
                } else {
                    for (int x = 0; x < w; ++x) {
                        // Just add to the next row from the data array
                        colsum[x] += data[(y + halfbox) * w + x];
                    }
                }
            } else {
                if (y >= halfbox_p1) {
                    // Just subtract
                    for (int x = 0; x < w; ++x) {
                        colsum[x] -= data[(y - halfbox_p1) * w + x];
                    }
                } // else no op on colsum[x]
            }

            rowsum = T{0};
            if (y >= 0) {
                // 2. Initialise rowsum. This happens after we have accumulated colsums. Init rowsum as the sum of the end col
                for (int i = -halfbox_p1; i < 0; ++i) { rowsum += colsum[i + w]; }
                for (int i = 0; i < halfbox; ++i) { rowsum += colsum[i]; }

                // 3. Compute the sum along the row, and write this into result
                int l = -halfbox_p1;
                int r = halfbox;
                for (int x = 0; x < w; ++x) {
                    // A modulus where -x modulus w gives always a positive index: (w + (a % w)) % w
                    rowsum += colsum[(w + (r++ % w)) % w] - colsum[(w + (l++ % w)) % w];

                    if constexpr (onlysum == true) {
                        result[y * w + x] = rowsum;
                    } else {
                        result[y * w + x] = rowsum * oneover_boxa;
                    }
                }
            }
        }
    }

    /*!
     * Boxfilter implementation 3
     *
     * This is a Boxfilter that works with a runtime-configured width, w, and not a
     * template-specified w, as is the case in implementations 1 and 2.
     *
     * \param data The input data. Should be a multiple of \tparam w in size. Must be
     * pre-allocated and of the same size as result.
     * \param result The output container. Must not be the same memory as input data.
     * \param w The width of rectangular data presented in the input.
     *
     * \tparam T The type of the input and output data
     * \tparam boxside The length of the boxfilter square
     * \tparam onlysum If true, only sum up the contributions from the box. If false, sum
     * contributions and divide by box area.
     */
    template<typename T, int boxside, bool onlysum = false>
    static void boxfilter_2d (const sm::vvec<T>& data, sm::vvec<T>& result, const int w)
    {
        if constexpr (boxside % 2 == 0) {
            throw std::runtime_error ("boxfilter_2d was not designed for even box filter squares (set boxside template param. to an odd value)");
        }
        if (result.size() != data.size()) {
            throw std::runtime_error ("The input data vector is not the same size as the result vector.");
        }
        if (&data == &result) {
            throw std::runtime_error ("Pass in separate memory for the result.");
        }

        // Divide by boxarea without accounting for edges (wrapping will sort horz edges)
        static constexpr T oneover_boxa = T{1} / (static_cast<T>(boxside) * static_cast<T>(boxside));
        static constexpr int halfbox = boxside / 2;
        static constexpr int halfbox_p1 = halfbox + 1;

        sm::vvec<T> colsum (w, T{0});
        T rowsum = T{0};

        int h = data.size() / w;

        // process data row by row
        for (int y = -halfbox; y < h; ++y) {

            // 1. Accumulate column sums; pull out last row.
            if (y + halfbox < h) {
                if (y >= halfbox_p1) {
                    for (int x = 0; x < w; ++x) {
                        // Add to the next row from the data array and subtract the last (bottom) row of the colsum
                        colsum[x] += data[(y + halfbox) * w + x]  -  data[(y - halfbox_p1) * w + x];
                    }
                } else {
                    for (int x = 0; x < w; ++x) {
                        // Just add to the next row from the data array
                        colsum[x] += data[(y + halfbox) * w + x];
                    }
                }
            } else {
                if (y >= halfbox_p1) {
                    // Just subtract
                    for (int x = 0; x < w; ++x) {
                        colsum[x] -= data[(y - halfbox_p1) * w + x];
                    }
                } // else no op on colsum[x]
            }

            rowsum = T{0};
            if (y >= 0) {
                // 2. Initialise rowsum. This happens after we have accumulated colsums. Init rowsum as the sum of the end col
                for (int i = -halfbox_p1; i < 0; ++i) { rowsum += colsum[i + w]; }
                for (int i = 0; i < halfbox; ++i) { rowsum += colsum[i]; }

                // 3. Compute the sum along the row, and write this into result
                int l = -halfbox_p1;
                int r = halfbox;
                for (int x = 0; x < w; ++x) {
                    // A modulus where -x modulus w gives always a positive index: (w + (a % w)) % w
                    rowsum += colsum[(w + (r++ % w)) % w] - colsum[(w + (l++ % w)) % w];

                    if constexpr (onlysum == true) {
                        result[y * w + x] = rowsum;
                    } else {
                        result[y * w + x] = rowsum * oneover_boxa;
                    }
                }
            }
        }
    }
}
