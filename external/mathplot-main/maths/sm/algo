// -*- C++ -*-
/*!
 * This file is part of sebsjames/maths, a library of maths code for modern C++
 *
 * See https://github.com/sebsjames/maths
 *
 * Miscellaneous algorithms
 *
 * \author Seb James
 */

#pragma once

#include <type_traits>
#include <cmath>
#include <complex>
#include <cstdint>
#include <limits>
#include <bitset>
#include <tuple>

#include <sm/mathconst>
#include <sm/constexpr_math> // constexpr math functions from Keith O'Hara
#include <sm/range>
#include <sm/vec>

namespace sm
{
    enum class rotation_sense : uint32_t
    {
        colinear,
        clockwise,
        anticlockwise
    };
}

namespace sm::algo
{
    // Find the significant base10 columns in a floating point number of type F Return a
    // range whose max is the order of magnitude of the largest base10 column and whose
    // min is the order of magnitude of the smallest significant base10 column.
    template <typename F> requires std::is_floating_point_v<F>
    constexpr sm::range<int> significant_cols (const F& f)
    {
        sm::range<int> sigcols = { 0, 0 };

        // If NaN or infinity, return 0, 0. Or something else?
        if (sm::cem::isnan(f) || sm::cem::isinf(f)) { return sigcols; }

        // How many sig figures does the type (float, double...) support?
        constexpr F epsilon = std::numeric_limits<F>::epsilon();
        constexpr int type_sf = static_cast<int>(sm::cem::floor (sm::cem::log10 (F{1} / epsilon)));

        // copy absolute value of f
        F fcpy = f > F{0} ? f : -f;

        // Find the biggest column
        sigcols.max = static_cast<int>(sm::cem::floor (sm::cem::log10 (fcpy)));

        // Initialize smallest column
        sigcols.min = sigcols.max;

        // We will need to use 10^sigcols.max
        F tentothe = sm::cem::pow (F{10}, sigcols.max);

        // Loop down sigcols.min until we hit the limit for type F
        for (; sigcols.min > (sigcols.max - type_sf); --sigcols.min) {

            // What's the value in this column?
            F colval = sm::cem::floor(fcpy / tentothe);

            // Is colval very small? Break if so.
            if (std::abs(colval) < epsilon) {
                ++sigcols.min;
                break;
            }

            // Is col val very close to 10? Break if so. This should relate to epsilon and current position
            if (colval > F{8}) {
                // additional cols depends on max precision of type and current col.
                int cols_remaining = type_sf - (sigcols.max - sigcols.min); // How many significant column have we already used?
                if (cols_remaining > 0) {
                    F additional_cols = sm::cem::pow (F{10}, cols_remaining);
                    if (sm::cem::abs((fcpy - colval * tentothe) - tentothe) < (tentothe / additional_cols)) {
                        ++sigcols.min;
                        break;
                    }
                } else { // no cols left
                    ++sigcols.min;
                    break;
                }
            }

            // Update fcpy by subtracting the column value, then shifting-right with multiply by 10
            fcpy = (fcpy - colval * tentothe) * F{10};
        }

        return sigcols;
    }

    // Return the amount of precision (significant figures in base 10) required for the
    // floating point number f
    template <typename F> requires std::is_floating_point_v<F>
    constexpr int significant_figs (const F& f)
    {
        sm::range<int> sc = sm::algo::significant_cols<F> (f);
        return sc.span();
    }

    // Round the number f to the base10 col mincol. In f, our convention is that column
    // 1 is 10s, 0 is 1s, -1 is tenths, -2 hundreds, etc. So round_to_col (1.2345f, -2)
    // should return 1.23f.
    template <typename F> requires std::is_floating_point_v<F>
    constexpr F round_to_col (const F& f, const int mincol)
    {
        if (sm::cem::isnan(f) || sm::cem::isinf(f)) { return f; }
        // How many sig figures does the type (float, double...) support?
        constexpr F epsilon = std::numeric_limits<F>::epsilon();
        constexpr int type_sf = static_cast<int>(sm::cem::floor (sm::cem::log10 (F{1} / epsilon)));

        // Save sign and a positive version of the input
        int sign = f > F{0} ? 1 : -1;
        F fcpy = f > F{0} ? f : -f;
        // Find the biggest column
        int maxcol = static_cast<int>(sm::cem::floor (sm::cem::log10 (fcpy)));
        // We will need to use 10^maxcol
        F tentothe = sm::cem::pow (F{10}, maxcol);
        // If user passed a mincol that's too big, return number rounded to maxcol
        if (mincol > maxcol) { return (sign > 0 ? tentothe : -tentothe); }
        F rounded = F{0};
        // Loop down curcol until we hit the limit for type F or mincol
        for (int curcol = maxcol; curcol >= mincol && curcol > (maxcol - type_sf); --curcol) {
            // What's the value in this column?
            F colval = sm::cem::floor(fcpy / tentothe);
            // Add to rounded
            rounded += sm::cem::pow (F{10}, curcol) * colval;

            if (curcol == mincol) {
                // We're on last col. What's the colval in the next col? Peek into it
                F fcpy_peek = (fcpy - colval * tentothe) * F{10};
                F colval_peek = sm::cem::floor (fcpy_peek / tentothe);
                if (colval_peek >= F{5}) { // need to round curcol up
                    rounded += sm::cem::pow (F{10}, curcol) * F{1};
                }
            }

            // Update fcpy by subtracting the column value, then shifting-right with multiply by 10
            fcpy = (fcpy - colval * tentothe) * F{10};
        }

        return (sign > 0 ? rounded : -rounded);
    }

    // Change any angle in radians to its equivalent in the range 0 to 2pi
    template <typename T> requires std::is_floating_point_v<T>
    constexpr void zero_to_twopi (T& radians)
    {
        if (radians >= sm::mathconst<T>::two_pi) {
            T num_two_pis = std::floor (radians / sm::mathconst<T>::two_pi);
            radians -= num_two_pis * sm::mathconst<T>::two_pi;
        } else if (radians < T{0}) {
            T num_two_pis = std::ceil (-radians / sm::mathconst<T>::two_pi);
            radians += num_two_pis * sm::mathconst<T>::two_pi;
        }
    }

    // Return any angle in radians to its equivalent in the range -pi to pi
    template <typename T> requires std::is_floating_point_v<T>
    constexpr void minus_pi_to_pi (T& radians)
    {
        radians += sm::mathconst<T>::pi;
        sm::algo::zero_to_twopi<T> (radians);
        radians -= sm::mathconst<T>::pi;
    }

    // Return n!
    template <typename T, typename I>
    constexpr T factorial (const I n)
    {
        T fac = T{1};
        for (I i = I{1}; i <= n; ++i) { fac *= i; }
        return fac;
    }

    // Compute the normalization function N^l_m. If invalid l<0 is passed, return 0.
    template <typename T, typename UI, typename I>
    requires (std::is_integral_v<UI> && !std::is_signed_v<UI> && std::is_integral_v<I> && std::is_signed_v<I>)
    T Nlm (const UI l, const I m)
    {
        using mc = sm::mathconst<T>;
        I absm = m < I{0} ? -m : m;
        return std::sqrt ( mc::one_over_four_pi * (T{2} * static_cast<T>(l) + T{1}) * (sm::algo::factorial<T, I>(l - absm) / sm::algo::factorial<T, I>(l + absm)));
    }

#ifndef __APPLE__ // There is no std::assoc_legendre on Mac, apparently
    //! Wraps std::assoc_legendre, allowing signed m (abs(m) always passed to std::assoc_legendre)
    template <typename T, typename UI, typename I>
    requires (std::is_integral_v<UI> && !std::is_signed_v<UI> && std::is_integral_v<I> && std::is_signed_v<I>)
    T Plm (const UI l, const I m, const T x)
    {
        unsigned int absm = m >= 0 ? static_cast<unsigned int>(m) : static_cast<unsigned int>(-m);
        return std::assoc_legendre (static_cast<unsigned int>(l), absm, x);
    }

    //! Compute the real spherical harmonic function with pre-computed normalization term Nlm.
    template <typename T, typename UI, typename I>
    requires (std::is_integral_v<UI> && !std::is_signed_v<UI> && std::is_integral_v<I> && std::is_signed_v<I>)
    T real_spherical_harmonic (const UI l, const I m, const T nlm, const T phi, const T theta)
    {
        using mc = sm::mathconst<T>;
        T ylm = T{0};
        if (m > I{0}) {
            ylm = mc::root_2 * nlm * std::cos (m * phi) * sm::algo::Plm<T, UI, I> (l, m, std::cos (theta));
        } else if (m < I{0}) {
            ylm = mc::root_2 * nlm * std::sin (-m * phi) * sm::algo::Plm<T, UI, I> (l, -m, std::cos (theta));
        } else { // m == 0
            ylm = nlm * sm::algo::Plm<T, UI, I> (l, I{0}, std::cos (theta));
        }
        return ylm;
    }

    //! Compute the real spherical harmonic function without a pre-computed normalization term
    template <typename T, typename UI, typename I>
    T real_spherical_harmonic (const UI l, const I m, const T phi, const T theta)
    {
        return sm::algo::real_spherical_harmonic<T, UI, I>(l, m, sm::algo::Nlm<T, UI, I>(l, m), phi, theta);
    }
#endif // __APPLE__

    //! Zernike moment Radial Polynomial, R_nm(rho), where rho is a radius between 0 and 1
    template <typename T, typename UI, typename I>
    requires (std::is_floating_point_v<T> && std::is_integral_v<UI> && !std::is_signed_v<UI> && std::is_integral_v<I> && std::is_signed_v<I>)
    constexpr T zern_radial_poly (const UI n, const I m, const T rho)
    {
        T Rnm = T{0};
        I _n = static_cast<I>(n);
        I abs_m = sm::cem::abs(m);
        for (I s = 0; s < (_n - abs_m / I{2}); ++s) {
            T denom = sm::algo::factorial<T, I>(s) * sm::algo::factorial<T, I>((_n + abs_m) / I{2} - s) * sm::algo::factorial<T, I>((_n - abs_m) / I{2} - s);
            Rnm += (s % I{2} == I{0} ? I{1} : I{-1}) * (sm::algo::factorial<T, I>(_n - s) / denom) * sm::cem::pow (rho, (_n - I{2} * s));
        }
        return Rnm;
    }

    //! Zernike Polynomial V_nm(rho, theta)
    template <typename T, typename I>
    requires (std::is_floating_point_v<T> && std::is_integral_v<I> && std::is_signed_v<I>)
    std::complex<T> zern_polynomial (const I m, const T Rnm, const T theta)
    {
        std::complex<T> j = {0, 1};
        std::complex<T> arg = j * static_cast<T>(m) * theta;
        std::complex<T> Vnm = Rnm * std::exp (arg);
        return Vnm;
    }

    //! Compute orientation of three points which form a triangle pqr.
    //! \return 0 if co-linear, 1 if clockwise; 2 if anticlockwise
    //! Algorithm, which uses slopes, taken from
    //! https://www.geeksforgeeks.org/orientation-3-ordered-points/
    template<typename T>
    rotation_sense orientation (const sm::vec<T, 2>& p,
                                const sm::vec<T, 2>& q,
                                const sm::vec<T, 2>& r)
    {
        T val = (q[1] - p[1]) * (r[0] - q[0])  -  (q[0] - p[0]) * (r[1] - q[1]);
        if (val == T{0}) { return rotation_sense::colinear; }
        return (val > T{0}) ? rotation_sense::clockwise : rotation_sense::anticlockwise;
    }

    // Given three colinear points p, q, r, the function checks if
    // point q lies on line segment 'pr'. Copied from:
    // https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
    template<typename T>
    static bool onsegment (const sm::vec<T, 2>& p,
                           const sm::vec<T, 2>& q,
                           const sm::vec<T, 2>& r)
    {
        return (q[0] <= std::max(p[0], r[0]) && q[0] >= std::min(p[0], r[0])
                && q[1] <= std::max(p[1], r[1]) && q[1] >= std::min(p[1], r[1]));
    }

    /*!
     * Do the line segments p1-q1 and p2-q2 intersect? Are they instead colinear? Return these
     * booleans in a bitset (bit0: intersection, bit1: colinear)
     *
     * \param p1 Start of line segment 1
     * \param q1 End of line segment 1
     * \param p2 Start of line segment 2
     * \param q2 End of line segment 2
     *
     * \return A bitset whose bit 0 indicates if the lines intersect and whose bit 1 indicates
     * if the lines are colinear
     */
    template<typename T>
    static std::bitset<2> segments_intersect (const sm::vec<T, 2>& p1, const sm::vec<T, 2> q1,
                                              const sm::vec<T, 2>& p2, const sm::vec<T, 2> q2)
    {
        std::bitset<2> rtn;
        sm::rotation_sense p1q1p2 = sm::algo::orientation (p1, q1, p2);
        sm::rotation_sense p1q1q2 = sm::algo::orientation (p1, q1, q2);
        sm::rotation_sense p2q2p1 = sm::algo::orientation (p2, q2, p1);
        sm::rotation_sense p2q2q1 = sm::algo::orientation (p2, q2, q1);
        if (p1q1p2 != p1q1q2 && p2q2p1 != p2q2q1) { // They intersect
            rtn.set(0, true);
        } else { // Are they colinear?
            if (p1q1p2 == sm::rotation_sense::colinear && sm::algo::onsegment (p1, p2, q1)) { rtn.set(1, true); }
            else if (p1q1q2 == sm::rotation_sense::colinear && sm::algo::onsegment (p1, q2, q1)) { rtn.set(1, true); }
            else if (p2q2p1 == sm::rotation_sense::colinear && sm::algo::onsegment (p2, p1, q2)) { rtn.set(1, true); }
            else if (p2q2q1 == sm::rotation_sense::colinear && sm::algo::onsegment (p2, q1, q2)) { rtn.set(1, true); }
        }

        return rtn;
    }

    /*!
     * Find the coordinate of the crossing point of the two line segments p1-q1 and p2-q2,
     * *assuming* the segments intersect. Call this *after* you have used
     * algo::segments_intersect!
     *
     * \param p1 Start of line segment 1
     * \param q1 End of line segment 1
     * \param p2 Start of line segment 2
     * \param q2 End of line segment 2
     *
     * \return Coordinate of the crossing point
     */
    template<typename T>
    static sm::vec<T, 2> crossing_point (const sm::vec<T, 2>& p1, const sm::vec<T, 2>& q1,
                                            const sm::vec<T, 2>& p2, const sm::vec<T, 2>& q2)
    {
        sm::vec<T, 2> p = p1;
        sm::vec<T, 2> r = p1 - q1;
        sm::vec<T, 2> q = p2;
        sm::vec<T, 2> s = p2 - q2;
        auto t = (q - p).cross(s / r.cross(s));
        sm::vec<T, 2> cross_point = p + t * r;
        return cross_point;
    }


    //! Bubble sort, high to low, order is returned in indices, values are left unchanged
    template<typename T>
    static void bubble_sort_hi_to_lo (const std::vector<T>& values, std::vector<unsigned int>& indices)
    {
        std::vector<T> vcopy = values;

        // Init indices to be a sequence
        for (unsigned int i = 0; i < indices.size(); ++i) { indices[i] = i; }

        T value = T{0};
        unsigned int index = 0u;
        unsigned int jplus = 0u;
        for (unsigned int i = 0u; i < vcopy.size(); ++i) {
            for (unsigned int j = 0u; j < vcopy.size()-1u; ++j) {
                jplus = j+1;
                if (vcopy[j] < vcopy[jplus]) {
                    // Swap value in the copy
                    value = vcopy[j];
                    vcopy[j] = vcopy[jplus];
                    vcopy[jplus] = value;
                    // Swap index too
                    index = indices[j];
                    indices[j] = indices[jplus];
                    indices[jplus] = index;
                }
            }
        }
    }

    //! Bubble sort, low to high, order is returned in indices, values are left unchanged
    template<typename T>
    static void bubble_sort_lo_to_hi (const std::vector<T>& values, std::vector<unsigned int>& indices)
    {
        std::vector<T> vcopy = values;

        // Init indices to be a sequence
        for (unsigned int i = 0; i < indices.size(); ++i) { indices[i] = i; }

        T value = T{0};
        unsigned int index = 0u;
        unsigned int jplus = 0u;
        for (unsigned int i = 0u; i < vcopy.size(); ++i) {
            for (unsigned int j = 0u; j < vcopy.size()-1u; ++j) {
                jplus = j+1;
                if (vcopy[j] > vcopy[jplus]) {
                    // Swap value in the copy
                    value = vcopy[j];
                    vcopy[j] = vcopy[jplus];
                    vcopy[jplus] = value;
                    // Swap index too
                    index = indices[j];
                    indices[j] = indices[jplus];
                    indices[jplus] = index;
                }
            }
        }
    }

    //! Return mean and sum of squared deviations from the mean
    template < template <typename, typename> typename C, typename T, typename Al=std::allocator<T> >
    static sm::vec<T, 2> meansos (const C<T, Al>& values)
    {
        sm::vec<T, 2> meansos = {T{0},T{0}};
        if (values.empty()) { return meansos; }
        for (T val : values) { meansos[0] += val; }
        meansos[0] /= values.size();

        for (T val : values) {
            // Add up sum of squared deviations
            meansos[1] += ((val-meansos[0])*(val-meansos[0]));
        }

        return meansos;
    }

    //! Covariance of two sets of numbers
    template < template <typename, typename> typename C, typename T, typename Al=std::allocator<T> >
    static T covariance (const C<T, Al>& x, const C<T, Al>& y)
    {
        if (x.empty() || y.empty()) { throw std::runtime_error ("x or y is empty."); }
        if (x.size() != y.size()) {
            throw std::runtime_error ("covariance: both number arrays to be same size.");
        }
        sm::vec<T, 2> ms_x = algo::meansos<C, T, Al> (x);
        sm::vec<T, 2> ms_y = algo::meansos<C, T, Al> (y);
        T cov = T{0};
        for (typename C<T, Al>::size_type i = 0; i < x.size(); ++i) {
            cov += ((x[i] - ms_x[0]) * (y[i] - ms_y[0]));
        }
        return cov;
    }

    //! Covariance of two sets of numbers, where means of x and y have already been computed
    template < template <typename, typename> typename C, typename T, typename Al=std::allocator<T> >
    static T covariance (const C<T, Al>& x, const T mean_x, const C<T, Al>& y, const T mean_y)
    {
        if (x.empty() || y.empty()) { throw std::runtime_error ("x or y is empty."); }
        if (x.size() != y.size()) {
            throw std::runtime_error ("covariance: both number arrays to be same size.");
        }
        T cov = T{0};
        for (typename C<T, Al>::size_type i = 0; i < x.size(); ++i) {
            cov += ((x[i] - mean_x) * (y[i] - mean_y));
        }
        return cov;
    }

    //! Linear regression. Return slope (first) and offset (second) (m and c from 'y
    //! = mx + c') in an vec<T, 2>
    template < template <typename, typename> typename C, typename T, typename Al=std::allocator<T> >
    static sm::vec<T, 2> linregr (const C<T, Al>& x, const C<T, Al>& y)
    {
        sm::vec<T, 2> ms_x = algo::meansos<C, T, Al> (x);
        sm::vec<T, 2> ms_y = algo::meansos<C, T, Al> (y);
        T cov_xy = algo::covariance<C, T, Al> (x, ms_x[0], y, ms_y[0]);
        T m = cov_xy / ms_x[1];
        T c = ms_y[0] - (m * ms_x[0]);
        return sm::vec<T, 2>{m, c};
    }

    // Does the line defined by p0->p1 pass through the box defined by the range box?
    template<typename T>
    static bool aabb_line_intersect (const sm::range<sm::vec<T, 3>>& box,
                                     const sm::vec<T, 3>& p0, const sm::vec<T, 3>& p1)
    {
        auto line_intersect = [box, p0, p1](uint32_t dim)
        {
            sm::vec<T> p = p0;
            sm::vec<T> v = p1 - p0;
            sm::vec<T> n = sm::vec<T>::u(dim);
            T ndotv = n.dot (v);
            T ndotp = n.dot (p);
            if (ndotv == T{0}) {
                return false; // No intersect at all
            }

            T d = -box.min[dim];
            T t = -(ndotp + d) / ndotv;
            sm::vec<T> ip = p + v * t;

            // Logic test...
            bool isect1 = true;
            for (uint8_t j = 0; j < 3; ++j) {
                if (j != dim && (ip[j] < box.min[j] || ip[j] > box.max[j])) {
                    isect1 = false;
                }
            }

            d = -box.max[dim];
            t = -(ndotp + d) / ndotv;
            ip = p + v * t;

            // Logic test...
            bool isect2 = true;
            for (uint8_t j = 0; j < 3; ++j) {
                if (j != dim && (ip[j] < box.min[j] || ip[j] > box.max[j])) {
                    isect2 = false;
                }
            }

            return isect1 || isect2;

        };
        bool one = line_intersect (0);
        bool two = line_intersect (1);
        bool three = line_intersect (2);

        return (one || two || three);
    }

    // Return the distance to the intersection of ray l0, l with plane p0, n.
    // l0 is the ray origin, l is a vector giving the ray's direction and length
    template<typename T>
    T ray_plane_intersection (const sm::vec<T, 3>& p0, const sm::vec<T, 3>& n,
                              const sm::vec<T, 3>& l0, const sm::vec<T, 3>& l)
    {
        constexpr T denom_thresh = std::numeric_limits<T>::epsilon() * 50;
        T denom = l.dot (n);
        if (sm::cem::abs(denom) < denom_thresh) {
            return std::numeric_limits<T>::max(); // parallel; no intersection
        } else {
            return (p0 - l0).dot (n) / denom;
        }
    }

    // Does the ray (l0, l) intersect with a disc radius r on plane (p0, n)?
    // l0 is the ray origin, l is a vector giving the ray's direction and length
    template<typename T>
    bool ray_disc_intersection (const sm::vec<T, 3>& p0, const sm::vec<T, 3>& n, const T& r,
                                const sm::vec<T, 3>& l0, const sm::vec<T, 3>& l)
    {
        T t = sm::algo::ray_plane_intersection<T> (p0, n, l0, l);
        if (t != std::numeric_limits<T>::max() && t != T{0}) {
            sm::vec<T, 3> p = l0 + l * t;
            sm::vec<T, 3> v = p - p0;
            return (v.length_sq() <= r * r);
        }
        return false;
    }

    // Does the ray (l0, l) intersect with a triangle defined by t0, t1, t2?  l0 is the ray origin,
    // l is a vector giving the ray's direction and length Return true/false. If true, p is the
    // intersection coordinate. The order of the triangle indices is important (must be CW (? really
    // clockwise ?))
    template<typename T, bool include_boundary = true, bool sided = true>
    std::tuple<bool, sm::vec<T, 3>> ray_tri_intersection (const sm::vec<T, 3>& t0, const sm::vec<T, 3>& t1, const sm::vec<T, 3>& t2,
                                                          const sm::vec<T, 3>& l0, const sm::vec<T, 3>& l)
    {
        sm::vec<T, 3> n = (t1 - t0).cross (t2 - t0); // renormalize not necessary in ray_plane_intersection

        // The dirn of n and the sign of n.l is determined by the order of the triangle indices,
        // which may, from an OpenGL indices container, be in any direction (either c.w or
        // anti-c.w). So we have to pay attention to the defined normal on the three vertices as well.
        if constexpr (sided) {
            // Only register rays hitting front of triangle (so n must be -ve)
            if (n.dot (l) >= T{0}) { return { false, {} }; }   // ray and plane are perpendicular or ray hits 'back'
        } else {
            if (n.dot (l) == T{0}) { return { false, {} }; }   // ray and plane are perpendicular
        }
        T d = sm::algo::ray_plane_intersection<T> (t0, n, l0, l);
        if (d < T{0}) { return { false, {} }; }                // triangle is behind ray
        if (d == std::numeric_limits<T>::max()) { return { false, {} }; } // ray and plane are parallel
        sm::vec<T, 3> p = d * l + l0; // hit point, p
        // Test if p is inside t0,t1,t2.
        bool isect = false;
        if constexpr (include_boundary) {
            // what if n was flipped?
            isect = ((n.dot ((t1 - t0).cross (p - t0)) >= T{0}) // >= to include triangle boundary
                     && (n.dot ((t2 - t1).cross (p - t1)) >= T{0})
                     && (n.dot ((t0 - t2).cross (p - t2)) >= T{0}));
        } else {
            isect = ((n.dot ((t1 - t0).cross (p - t0)) > T{0})
                     && (n.dot ((t2 - t1).cross (p - t1)) > T{0})
                     && (n.dot ((t0 - t2).cross (p - t2)) > T{0}));
        }
        return { isect, p };
    }

} // sm::algo
