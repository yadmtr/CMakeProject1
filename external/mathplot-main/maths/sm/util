// -*- C++ -*-
/*!
 * This file is part of sebsjames/maths, a library of maths code for modern C++
 *
 * See https://github.com/sebsjames/maths
 *
 * Utility functions
 */
#pragma once

#include <string>
#include <vector>
#include <stdexcept>

namespace sm::util
{
    /*!
     * Split a string of values into a vector using the separator string (not char)
     * passed in as "separator". If ignoreTrailingEmptyVal is true, then a trailing
     * separator with nothing after it will NOT cause an additional empty value in
     * the returned vector. See also splitStringWithEncs
     */
    std::vector<std::string> string_to_vector (const std::string& s,
                                               const std::string& separator,
                                               const bool ignoreTrailingEmptyVal = true)
    {
        if (separator.empty()) {
            throw std::runtime_error ("Can't split the string; the separator is empty.");
        }
        std::vector<std::string> theVec;
        std::string entry("");
        std::string::size_type sepLen = separator.size();
        std::string::size_type a=0, b=0;
        while (a < s.size() && (b = s.find (separator, a)) != std::string::npos) {
            entry = s.substr (a, b-a);
            theVec.push_back (entry);
            a=b+sepLen;
        }
        // Last one has no separator
        if (a < s.size()) {
            b = s.size();
            entry = s.substr (a, b-a);
            theVec.push_back (entry);
        } else {
            if (!ignoreTrailingEmptyVal) {
                theVec.push_back ("");
            }
        }

        return theVec;
    }

    // Strip bracket characters from string
    void strip_brackets (std::string& str)
    {
        static constexpr std::string_view bracket_chars {"{}[]()"};
        std::string::size_type ptr = std::string::npos;
        while ((ptr = str.find_last_of (bracket_chars, ptr)) != std::string::npos) {
            str = str.erase (ptr, 1);
        }
    }

} // namespace
