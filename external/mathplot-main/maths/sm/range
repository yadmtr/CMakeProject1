// -*- C++ -*-
/*
 * This file is part of sebsjames/maths, a library of maths code for modern C++
 *
 * See https://github.com/sebsjames/maths
 *
 * A tiny container class to hold the min and max of a range. I wanted a common type in
 * which to return minmax values for use in sm::vec and sm::vvec. An option would
 * have been an std::array, but I prefer this, as vvec doesn't otherwise need to include
 * <array>. range can be used in constexpr functions.
 *
 * Extra bonus: You can use this as an implementation of an axis-aligned bounding box!
 *
 * Author: Seb James
 * Date: Sept. 2023.
 */
#pragma once

#include <ostream>
#include <sstream>
#include <limits>
#include <complex>
#include <span>
#include <sm/trait_tests>
#include <sm/constexpr_math>

namespace sm
{
    // Different values to use to initialize a range object with
    enum class range_init { zeros, for_search };

    // Forward declare the class and stream operator
    template <typename T> struct range;
    template <typename T> std::ostream& operator<< (std::ostream&, const range<T>&);

    // range is a constexpr-friendly literal type defining a closed interval [min, max]
    template <typename T>
    struct range
    {
        // The minimum value in the closed interval
        T min = T{0};
        // The maximum value
        T max = T{0};

        // In the default constructor, min == max == T{0}
        constexpr range() noexcept {}
        // Range constructor in which you can specify that the range should be initialized for search
        constexpr range (const sm::range_init _range_init) noexcept
        {
            if (_range_init == sm::range_init::for_search) { this->search_init(); }
        }
        // Range constructor taking the min and max for a ready-to-go range
        constexpr range (const T& _min, const T& _max) noexcept : min(_min), max(_max) {}

        // Set the range to _min, _max
        constexpr void set (const T& _min, const T& _max) noexcept
        {
            this->min = _min;
            this->max = _max;
        }

        // Output a string representation of the min and max. Rewrite with <format> at some point.
        std::string str() const
        {
            std::stringstream ss;
            ss << "[" << this->min << ", " << this->max << "]";
            return ss.str();
        }

        template<typename Ty=T>
        requires std::is_floating_point_v<Ty>
        constexpr bool operator== (const range<Ty>& rhs) const noexcept
        {
            return (sm::cem::abs(this->min - static_cast<T>(rhs.min)) < std::numeric_limits<T>::epsilon()
                    && sm::cem::abs(this->max - static_cast<T>(rhs.max)) < std::numeric_limits<T>::epsilon());
        }

        template<typename Ty=T>
        requires std::is_floating_point_v<Ty>
        constexpr bool operator!= (const range<Ty>& rhs) const noexcept
        {
            return (sm::cem::abs(this->min - static_cast<T>(rhs.min)) > std::numeric_limits<T>::epsilon()
                    || sm::cem::abs(this->max - static_cast<T>(rhs.max)) > std::numeric_limits<T>::epsilon());
        }

        template<typename Ty=T>
        requires std::is_integral_v<Ty>
        constexpr bool operator== (const range<Ty>& rhs) const noexcept
        {
            return (this->min == static_cast<T>(rhs.min) && this->max == static_cast<T>(rhs.max));
        }

        template<typename Ty=T>
        requires std::is_integral_v<Ty>
        constexpr bool operator!= (const range<Ty>& rhs) const noexcept
        {
            return (this->min != static_cast<T>(rhs.min) || this->max != static_cast<T>(rhs.max));
        }

        // Adding to a range means adding to both min and max
        constexpr sm::range<T> operator+ (const T& s) const noexcept
        {
            return sm::range<T>{ this->min + s, this->max + s };
        }
        constexpr void operator+= (const T& s) noexcept
        {
            this->min += s;
            this->max += s;
        }

        // Subtracting from a range
        constexpr sm::range<T> operator- (const T& s) const noexcept
        {
            return sm::range<T>{ this->min - s, this->max - s };
        }
        constexpr void operator-= (const T& s) noexcept
        {
            this->min -= s;
            this->max -= s;
        }

        // Return a range that is initialized to participate in a search for the max and
        // min through a range of data.
        //
        // Range can then be part of a loop through data with code like:
        //
        // sm::vvec<T> data;
        // data.randomize();
        // sm::range<T> r = sm::range<T>::search_initialized();
        // for (auto d : data) { r.update (d); }
        // std::cout << "The range of values in data was: " << r << std::endl;
        static constexpr sm::range<T> search_initialized() noexcept
        {
            sm::range<T> si;
            if constexpr (sm::number_type<T>::value == 2) { // range is complex
                si.min = { std::numeric_limits<typename T::value_type>::max(), std::numeric_limits<typename T::value_type>::max() };
                si.max = { std::numeric_limits<typename T::value_type>::lowest(), std::numeric_limits<typename T::value_type>::lowest() };
            } else if constexpr (sm::number_type<T>::value == 1) { // range is scalar
                si.min = std::numeric_limits<T>::max();
                si.max = std::numeric_limits<T>::lowest();
            } else {
                si.min = sm::range<T>::max_vector<T>();
                si.max = sm::range<T>::lowest_vector<T>();
            }
            return si;
        }

        // Initialise the range to participate in a search for the max and min through a range of data.
        //
        // Range can then be part of a loop through data with code like:
        //
        // sm::vvec<T> data;
        // data.randomize();
        // sm::range<T> r;
        // r.search_init();
        // for (auto d : data) { r.update (d); }
        // std::cout << "The range of values in data was: " << r << std::endl;
        constexpr void search_init() noexcept { *this = sm::range<T>::search_initialized(); }

        // Extend the range to include the given datum. Return true if the range changed.
        constexpr bool update (const T& d) noexcept
        {
            bool changed = false;
            if constexpr (sm::number_type<T>::value == 2) { // range is complex
                // Does d 'extend the rectangle in the complex plane that defines the complex range'?
                this->min = std::real(d) < std::real(this->min) || std::imag(d) < std::imag(this->min) ? changed = true, d : this->min;
                this->max = std::real(d) > std::real(this->max) || std::imag(d) > std::imag(this->max) ? changed = true, d : this->max;
            } else if constexpr (sm::number_type<T>::value == 1) { // range is scalar
                this->min = d < this->min ? changed = true, d : this->min;
                this->max = d > this->max ? changed = true, d : this->max;
            } else {
                // Does d extend the volume defined by min and max?
                changed = sm::range<T>::vec_min (this->min, d) ? true : changed;
                changed = sm::range<T>::vec_max (this->max, d) ? true : changed;
            }
            return changed;
        }

        // Does the range contain the value v?
        constexpr bool contains (const T& v) const noexcept
        {
            if constexpr (sm::number_type<T>::value == 2) { // range is complex
                // Is v inside the rectangle in the complex plane made by min and max?
                return (std::real(v) <= std::real(this->max) && std::real(v) >= std::real(this->min)
                        && std::imag(v) <= std::imag(this->max) && std::imag(v) >= std::imag(this->min));
            } else if constexpr (sm::number_type<T>::value == 1) { // range is scalar
                return (v <= this->max && v >= this->min);
            } else {
                // Same logic for vector as for scalar
                return (v <= this->max && v >= this->min);
            }
        }

        // If the range other 'fits inside' this range, then this range contains (or encompasses) the range other.
        constexpr bool contains (const sm::range<T>& other) const noexcept
        {
            if constexpr (sm::number_type<T>::value == 2) { // range is complex
                // Does other define a rectangle in the complex plane that fits inside the one made by this->min and max?
                bool othermin_inside = std::real(this->min) <= std::real(other.min) && std::imag(this->min) <= std::imag(other.min)
                && std::real(this->max) >= std::real(other.min) && std::imag(this->max) >= std::imag(other.min);
                bool othermax_inside = std::real(this->min) <= std::real(other.max) && std::imag(this->min) <= std::imag(other.max)
                && std::real(this->max) >= std::real(other.max) && std::imag(this->max) >= std::imag(other.max);
                return othermin_inside && othermax_inside;
            } else if constexpr (sm::number_type<T>::value == 1) { // range is scalar
                return (this->min <= other.min && this->max >= other.max);
            } else {
                return this->contains (this->min) && this->contains (this->max);
            }
        }

        // If the range other intersects with this range, return true
        constexpr bool intersects (const sm::range<T>& other) const noexcept
        {
            if constexpr (sm::number_type<T>::value == 2) { // range is complex
                // Does other define a rectangle in the complex plane that intersects the one made by this->min and max?
                bool othermin_inside = std::real(this->min) <= std::real(other.min) && std::imag(this->min) <= std::imag(other.min)
                && std::real(this->max) >= std::real(other.min) && std::imag(this->max) >= std::imag(other.min);
                bool othermax_inside = std::real(this->min) <= std::real(other.max) && std::imag(this->min) <= std::imag(other.max)
                && std::real(this->max) >= std::real(other.max) && std::imag(this->max) >= std::imag(other.max);
                return othermin_inside || othermax_inside;
            } else if constexpr (sm::number_type<T>::value == 1) { // range is scalar
                // If othermin is inside this or othermax is inside this then intersects is true:
                return ((other.min < this->max) && (other.min > this->min)) || ((other.max < this->max) && (other.max > this->min));
            } else {
                using T_el=std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
                std::size_t sz = sizeof (T) / sizeof (T_el);
                for (std::size_t i = 0; i < sz; ++i) {
                    if (other.min[i] > this->max[i] || other.max[i] < this->min[i]) { return false; }
                }
                return true;
            }
        }

        // What's the 'span of the range'? Whether scalar or complex (or vector), it's max - min
        constexpr T span() const noexcept { return this->max - this->min; }

        // What's the middle of the range?
        constexpr T mid() const noexcept
        {
            if constexpr (sm::number_type<T>::value == 0) {
                using T_el=std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
                return (this->max + this->min) / T_el{2};
            } else {
                return (this->max + this->min) / T{2};
            }
        }

        // Static member to get a range from any old container of values.
        template <typename C> requires sm::is_copyable_container<C>::value
        static sm::range<T> get_from (const C& values)
        {
            using Tc = typename C::value_type;

            // The container element type must match T
            if constexpr (std::is_same_v<T, Tc>) {
                if constexpr (sm::number_type<T>::value == 0) { // vector elements
                    // Example to get the type of the container T.
                    // See https://stackoverflow.com/questions/44521991/type-trait-to-get-element-type-of-stdarray-or-c-style-array
                    using T_el = std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
                    sm::range<Tc> r (std::numeric_limits<T>::max(), std::numeric_limits<T>::min());
                    T_el maxlen = 0;
                    T_el minlen = std::numeric_limits<T_el>::max();

                    for (auto v : values) {
                        // (Vector version compares sqrt (v[0]*v[0] + v[1]*v[1] +...))
                        T_el vlen = 0;
                        for (auto vi : v) { vlen += vi*vi; }
                        vlen = std::sqrt (vlen);
                        if (vlen > maxlen) {
                            maxlen = vlen;
                            r.max = v;
                        }
                        if (vlen < minlen) {
                            minlen = vlen;
                            r.min = v;
                        }
                    }
                    return r; // range of vector elements

                } else if constexpr (sm::number_type<T>::value == 2) { // complex elements
                    using T_el = typename T::value_type; // If T is std::complex<float>, T_el will be float
                    // Note that there's no specialization of numeric_limits for std::complex, so set it up manually
                    sm::range<T> r ({std::numeric_limits<T_el>::max(), std::numeric_limits<T_el>::max() }, T{0, 0});
                    for (auto v : values) {
                        // comparison operations on complex numbers commonly consider their
                        // modulus - how far the number is from the origin.
                        r.max = std::abs(v) > std::abs(r.max) ? v : r.max;
                        r.min = std::abs(v) < std::abs(r.min) ? v : r.min;
                    }
                    return r; // range of complex elements

                } else if constexpr (sm::number_type<T>::value == 1) { // scalar elements
                    sm::range<T> r (std::numeric_limits<T>::max(), std::numeric_limits<T>::lowest());
                    for (auto v : values) {
                        r.max = v > r.max ? v : r.max;
                        r.min = v < r.min ? v : r.min;
                    }
                    return r; // range of scalar elements
                } else {
                    []<bool flag = false>() { static_assert(flag, "Can't find range for that number_type"); }();
                }
            } else {
                []<bool flag = false>() { static_assert(flag, "Container element type should match range type T"); }();
            }
        }

        // Static member to get a range from a span of values
        static sm::range<T> get_from (const std::span<T> values)
        {
            if constexpr (sm::number_type<T>::value == 0) { // vector elements
                // Example to get the type of the container T.
                // See https://stackoverflow.com/questions/44521991/type-trait-to-get-element-type-of-stdarray-or-c-style-array
                using T_el = std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
                sm::range<T> r (std::numeric_limits<T>::max(), std::numeric_limits<T>::min());
                T_el maxlen = 0;
                T_el minlen = std::numeric_limits<T_el>::max();

                for (auto v : values) {
                    // (Vector version compares sqrt (v[0]*v[0] + v[1]*v[1] +...))
                    T_el vlen = 0;
                    for (auto vi : v) { vlen += vi*vi; }
                    vlen = std::sqrt (vlen);
                    if (vlen > maxlen) {
                        maxlen = vlen;
                        r.max = v;
                    }
                    if (vlen < minlen) {
                        minlen = vlen;
                        r.min = v;
                    }
                }
                return r; // range of vector elements

            } else if constexpr (sm::number_type<T>::value == 2) { // complex elements
                using T_el = typename T::value_type; // If T is std::complex<float>, T_el will be float
                // Note that there's no specialization of numeric_limits for std::complex, so set it up manually
                sm::range<T> r ({std::numeric_limits<T_el>::max(), std::numeric_limits<T_el>::max() }, T{0, 0});
                for (auto v : values) {
                    // comparison operations on complex numbers commonly consider their
                    // modulus - how far the number is from the origin.
                    r.max = std::abs(v) > std::abs(r.max) ? v : r.max;
                    r.min = std::abs(v) < std::abs(r.min) ? v : r.min;
                }
                return r; // range of complex elements

            } else if constexpr (sm::number_type<T>::value == 1) { // scalar elements
                sm::range<T> r (std::numeric_limits<T>::max(), std::numeric_limits<T>::lowest());
                for (auto v : values) {
                    r.max = v > r.max ? v : r.max;
                    r.min = v < r.min ? v : r.min;
                }
                return r; // range of scalar elements
            } else {
                []<bool flag = false>() { static_assert(flag, "Can't find range for that number_type"); }();
            }
        }

        // Overload the stream output operator
        friend std::ostream& operator<< <T> (std::ostream& os, const range<T>& r);

    private:
        // constexpr method to fill a vector-type T with the lowest possible value elements
        template<typename Ty=T>
        requires (sm::number_type<Ty>::value == 0)
        static constexpr T lowest_vector() noexcept
        {
            using T_el=std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
            T lowest_vec = {};
            std::size_t sz = sizeof (T) / sizeof (T_el);
            for (std::size_t i = 0; i < sz; ++i) {
                lowest_vec[i] = std::numeric_limits<T_el>::lowest();
            }
            return lowest_vec;
        }

        // constexpr method to fill a vector-type T with the max possible value elements
        template<typename Ty=T>
        requires (sm::number_type<Ty>::value == 0)
        static constexpr T max_vector() noexcept
        {
            using T_el=std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
            T max_vec = {};
            std::size_t sz = sizeof (T) / sizeof (T_el);
            for (std::size_t i = 0; i < sz; ++i) {
                max_vec[i] = std::numeric_limits<T_el>::max();
            }
            return max_vec;
        }

        // Compare contender with current minimum, cmin. If any element is less than
        // element in cmin, change cmin and return true.
        template<typename Ty=T>
        requires (sm::number_type<Ty>::value == 0)
        static constexpr bool vec_min (T& cmin, const T& contender) noexcept
        {
            using T_el=std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
            std::size_t sz = sizeof (T) / sizeof (T_el);
            bool changed = false;
            for (std::size_t i = 0; i < sz; ++i) {
                cmin[i] = contender[i] < cmin[i] ? changed = true, contender[i] : cmin[i];
            }
            return changed;
        }

        // Compare contender with current maximum, cmax. If any element is greater than
        // element in cmax, change cmax and return true.
        template<typename Ty=T>
        requires (sm::number_type<Ty>::value == 0)
        static constexpr bool vec_max (T& cmax, const T& contender) noexcept
        {
            using T_el=std::remove_reference_t<decltype(*std::begin(std::declval<T&>()))>;
            std::size_t sz = sizeof (T) / sizeof (T_el);
            bool changed = false;
            for (std::size_t i = 0; i < sz; ++i) {
                cmax[i] = contender[i] > cmax[i] ? changed = true, contender[i] : cmax[i];
            }
            return changed;
        }
    };

    // Output a string with notation "[min, max]" to indicate a closed interval
    template <typename T>
    std::ostream& operator<< (std::ostream& os, const range<T>& r)
    {
        os << "[" << r.min << ", " << r.max << "]";
        return os;
    }

} // namespace sm
